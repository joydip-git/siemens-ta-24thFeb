1. .NET Framework
	a. Base/Framework class library
	b. Common Language Runtime (CLR)
	c. ADO.NET
	d. ASP.NET
2. Advantages:
	a. Multi-lingual
	b. PE code
	c. inter-operability
	d. Platform neutrality
3. Execution Cycle:
	step-1:
	a. Source code gets compiled to IL code with the help of language specific compiler
	b. produces Assembly (exe/dll) - standalone or reusable (PE file)
	c. commands: csc /t:exe <file-name>.cs
		     csc /t:library <file-name>.cs
			/r: lib-name.dll
	step-2:
	a. CLR gets loaded in proces smemor space
	b. Il code gets converted to machine language code using JIT compiler
	c. execution starts from Main method

4. Assembly components:
	a. Manifest
	b. Metainfo/Type Metadata
	c. IL Code
	d. Resources (optional)
	e. Headers
		i. Win32 Header (optional): what type of app, some OS dlls information
		ii. CL Header: framework version, digital signature
	
5. C#
	a. data types
		i. value type:
			A. built-in: int, long, decimal etc.
			B. user-defined: struct, enum
		ii. reference type: 
			A. bulit-in: string, object, array etc.
			B. user-defined: class, interface, delegate, event

6. statements:
	a. if..else
	b. while
	c. do..while
	d. switch...case
	e. for
	f. foreach
	g. break;
	h. continue

7. operators:
	usage:
	a. arithmatic: +, -, *, /, %
	b. logical: || and &&
	c. euqality: ==, !=, >, <, >=, <=
	
	operands:
	a. unary: ++, --
	b. binary: +, - etc.
	c. ternary: ?:

	int a =10;
	a++; // a= a+1;
	a--; //a = a-1;

	int b= 20;
	int c = a > b ? a : b;

8. passing arguments to methods and keywords:
	a. pass by value: no keyword
	b. pass by reference: ref keyword
	c. pass by out: out keyword

note: local variables (to a method) doesn't have any default value in C#

	difference:
	1.
	pass by value and ref doesn't work if the variable is not assigned a value
	pass by out allows a variable to be passed to a method without being assigned any value to it.
	2.
	in the called method, a variable passed by value or by ref CAN be assigned a new value
	in the called method, a variable passed by out, MUST be assigned
	

	d. named arguments: no keyword
	e. optional argument with default value: no keyword

9. enum:
	a. how to declare
	b. how to change data type of enum member value
	c. how to initialize a enum member with random value
	d. how to declare a variable of enum type
	e. how to assign value to enum variable
	f. how to display the enum variable and it's hidden value
	g. how to use enum in switch...case

10. struct (structure)

11. array

12. OOP:
	a. class: blueprint to create instances
		access specifiers:
		public and internal (default)

	i. data members:
		access specifiers:
		public, internal, protected, private (default), protected internal

	ii. methods
		access specifiers:
		public, internal, protected, private (default), protected internal

	b. object: real time entity, created based on class blueprint. Memory allocation is in the heap memory block, reference to it is stored in stack.

	c. encapsulation:technique of putting data and functionality together in a class

	d. data abstraction: hiding the data members inside the class by using the access specifier

	e. functional abstarction: hiding the implementation of a method (NOT the method itself) inside a class

	f. constructor: a special function inside a class, which is used to assign values (either default or user defined) to data members during object creation (NOT afetr OR before)
	Note:
	1. job: assign default values
        2. timing: during object creation
        3. characterestics:
        	1. no return type
        	2. name of this method is same as that of the class
	        3. can be default (assigns default values) and parameterized (can assign user values)
		4. default constructor is supplied by compiler (compilation time) when there is no constructor written inside the class explicitly
		5. parameterized constructor is not supplied by compiler

	g. Property: an encapsulator for methods to assign value to data member of class and return value of the data member from class. also known as property function
	Note:
	1. contains two types of accessors: get and set
	2. can have both or either of them at a time
	If contains only set accessor: write-only property
	If contains only get accessor: read-only property
	3. after creation of object, at a time one property will be called and single value can be passed or returned
	4. invoked like data member, NOT like a method
	5. way of encapsulating data member
	6. old style:
		public <data-type> <Property-name>
		{
			set { <data-member> = value; }
			get { return <data-member>; }
		}
		[value is auto-declared variable local ONLY to set accessor. not even available in get accessor]
	7. new style:(2017 VS onward)
		public <data-type> <Property-name>
		{
			set => <data-member> = value; 
			get => <data-member>; 
		}

	
		



New Features:
	a. string interpolation: $"{<variable>}" (v4.6 - 2015, C# 6.0)
	b. optional argument with default value (v4.0 - 2010)
	c. named arguments (v4.0-2010)
	d. static import: 
	syntax:
	using static <namespace>.<static-class-name>;
	use:
	Now you can use all the static members of the static class in your code without mentioning the class name
	Rule: static import is possible if the class is declared with static keyword
	






