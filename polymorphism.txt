compile-time polymorphism: (static binding)
inside a single class, you can write multiple methods with same name (also for ctor)

class Printer{
public static void PrintInfo(Trainer person){}
public static void PrintInfo(Trainee person){}
}

a. should have args of different types
b. number of args should be different
c. position of args should be different

public void Add(int x, int y){}
public void Add(int x, int y, int z){}
public void Add(int x, int y, double z){} 45
public void Add(int x, double y, int z){}

obj.Add(12,13,15.67); 78

runtime polymorphism: (dynamic)
base class and child class can also have method name but with different code

class Person{

	public string Print(){ //code 1}
}
class Trainer:Person{
	public string Print(){ //code 2}
}

   Person p = new Trainer();
   p.Print(); 89

 "joy"+"dip"

1+2

